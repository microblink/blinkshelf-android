{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BlinkShelf","text":"<p>The BlinkShelf SDK lets you build a fantastic in-store experience in your Android app. Effortlessly scan the products in the grocery store and get all the needed data about them!</p> <p> </p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>AndroidX</li> <li>Min SDK 21+</li> <li>Compile SDK: 33+</li> <li>Java 8+</li> </ul>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#version-100-2022-12-08","title":"Version 1.0.0 (2022-12-08)","text":"<p>Initial release.</p>"},{"location":"custom_ux/","title":"Custom UX","text":"<p>Customization can be achieved by passing the <code>Theme</code> object to the <code>RecognitionSettings</code>, which is used when instantiating fragments as described on the Getting Started page. <code>Theme</code> class provides different customization options, like defining app colors and styles of different UI components.</p> <p>An example of customization is shown in the code sample below.</p> <pre><code>val settings = RecognitionSettings {\ntheme(\nTheme(\ncolors = ThemeColors.Builder()\n.primaryColor(Color.resourceColor(context, R.color.purple))\n.secondaryColor(Color.hexColor(0xFF_7FF_F00))\n.textColor(Color.composeColor(ComposeColor.Yellow))\n.build(),\nstatusBannerStyle = StatusBannerStyle.Builder()\n.noPromotionText(Text.stringRes(R.string.text))\n.build(),\nresultDetailsStyle = ResultDetailsStyle.Builder()\n.detailsIcon(Icon.drawableRes(R.drawable.ic_tag))\n.detailsIconTintColor(Color.hexColor(0xFF_000_000))\n.build(),\npermissionOverlayStyle = PermissionOverlayStyle.Builder()\n.backgroundColor(Color.composeColor(ComposeColor.LightGray))\n.buttonBackgroundColor(Color.hexColor(0xFF_000_000))\n.buttonText(Text.stringRes(R.string.button))\n.buttonTextColor(Color.hexColor(0xFF_FFF_FFF))\n.build()\n)\n)\n...\n}\n</code></pre> <p>When specifying any color, make sure to use SDK\u2019s <code>Color</code> class. The class contains helper methods that can create a <code>Color</code> object from resource color, hex value, or Compose Color.</p> <p>The following sections contain a detailed description of how <code>Theme</code> can be used to customize the experience.</p>"},{"location":"custom_ux/#colors","title":"Colors","text":"<p>It is possible to define the following colors as part of the <code>ThemeColors</code> object:</p> <ul> <li>the primary color, the default value is <code>#0F62F2</code></li> <li>the secondary color, the default value is <code>#DFFE00</code></li> <li>the text color, the default value is <code>#142641</code></li> </ul> <pre><code>ThemeColors.Builder()\n.primaryColor(Color.resourceColor(context, R.color.purple))\n.secondaryColor(Color.hexColor(0xFF_7FF_F00))\n.textColor(Color.composeColor(ComposeColor.Yellow))\n.build()\n</code></pre> <p>Note that defining some of the styles below can override the colors mentioned in this section.</p>"},{"location":"custom_ux/#boundary-style","title":"Boundary Style","text":"<p>If a region of interest is defined, boundaries will be applied to the scanning and captured frame.</p> <pre><code>BoundaryStyle.Builder()\n.scanningColor(Color.composeColor(ComposeColor.Red))\n.capturedColor(Color.composeColor(ComposeColor.Blue))\n.build()\n</code></pre> Default Scanning Boundary Custom Scanning Boundary Default Captured Boundary Custom Captured Boundary"},{"location":"custom_ux/#status-banner-style","title":"Status Banner Style","text":"<p>Style used to define the look and feel of the status banner that appears for certain errors, like \u201cno results found\u201d.</p> <pre><code>StatusBannerStyle.Builder()\n.textColor(Color.hexColor(0xFF_FFF_FFF))\n.backgroundColor(Color.hexColor(0xFF_000_000))\n.noPromotionText(Text.stringRes(R.string.text))\n.build()\n</code></pre> Default Status Banner Custom Status Banner"},{"location":"custom_ux/#promotion-banner-style","title":"Promotion Banner Style","text":"<p>Style used to define the look and feel of the promotion banner shown on top of the results.</p> <pre><code>PromotionBannerStyle.Builder()\n.textColor(Color.composeColor(ComposeColor.Yellow))\n.backgroundColor(Color.composeColor(ComposeColor.Red))\n.build()\n</code></pre> Default Promotion Banner Custom Promotion Banner"},{"location":"custom_ux/#promotion-tag-style","title":"Promotion Tag Style","text":"<p>Style used to define the look of the indicator similar to the banner, containing an icon, shown on top of the results.</p> <pre><code>PromotionTagStyle.Builder()\n.icon(Icon.drawableRes(R.drawable.ic_tag))\n.tintColor(Color.composeColor(ComposeColor.Yellow))\n.backgroundColor(Color.composeColor(ComposeColor.Red))\n.build()\n</code></pre> Default Promotion Tag Custom Promotion Tag"},{"location":"custom_ux/#camera-button-style","title":"Camera Button Style","text":"<p>Style used to define the camera button appearance.</p> <pre><code>CameraButtonStyle.Builder()\n.icon(Icon.drawableRes(R.drawable.ic_camera))\n.tintColor(Color.composeColor(ComposeColor.Cyan))\n.build()\n</code></pre> Default Camera Button Custom Camera Button"},{"location":"custom_ux/#result-indicator-style","title":"Result Indicator Style","text":"<p>Style used for indicator displayed on top of the detected product.</p> <pre><code>ResultIndicatorStyle.Builder()\n.backgroundColor(Color.composeColor(ComposeColor.Blue))\n.promotionIcon(Icon.drawableRes(R.drawable.ic_tag))\n.promotionIconTintColor(Color.hexColor(0xFF_FFF_FFF))\n.promotionCounterBackgroundColor(Color.resourceColor(context, R.color.green))\n.promotionCounterTextColor(Color.hexColor(0xFF_000_000))\n.build()\n</code></pre> Default Result Indicator Custom Result Indicator"},{"location":"custom_ux/#result-card-style","title":"Result Card Style","text":"<p>Style used to define the appearance of the card containing results, i.e. product and promotion details.</p> <pre><code>ResultCardStyle.Builder()\n.titleTextColor(Color.hexColor(0xFF_FFF_FFF))\n.subtitleTextColor(Color.composeColor(ComposeColor.Green))\n.detailsTextColor(Color.composeColor(ComposeColor.Blue))\n.backgroundColor(Color.composeColor(ComposeColor.DarkGray))\n.build()\n</code></pre> Default Result Card Custom Result Card"},{"location":"custom_ux/#result-details-style","title":"Result Details Style","text":"<p>Style used to define the appearance of the bottom sheet containing result details.</p> <pre><code>ResultDetailsStyle.Builder()\n.closeIcon(Icon.drawableRes(R.drawable.ic_close))\n.titleTextColor(Color.composeColor(ComposeColor.Yellow))\n.detailsIcon(Icon.drawableRes(R.drawable.ic_tag))\n.detailsIconTintColor(Color.hexColor(0xFF_000_000))\n.detailsLabelTextColor(Color.composeColor(ComposeColor.Red))\n.detailsStrokeColor(Color.hexColor(0xFF_FFF_FFF))\n.detailsTitleTextColor(Color.composeColor(ComposeColor.Blue))\n.detailsContentTextColor(Color.resourceColor(context, R.color.green))\n.backgroundColor(Color.composeColor(ComposeColor.LightGray))\n.build()\n</code></pre> Default Result Details Custom Result Details"},{"location":"custom_ux/#result-list-container-style","title":"Result List Container Style","text":"<p>Style used to define the appearance of the bottom sheet containing results, i.e. list of products and promotions, and the sheet\u2019s container.</p> <pre><code>ResultListContainerStyle.Builder()\n.containerBackgroundColor(Color.resourceColor(context, R.color.purple))\n.sheetBackgroundColor(Color.composeColor(ComposeColor.Yellow))\n.notchColor(Color.composeColor(ComposeColor.Green))\n.titleTextColor(Color.hexColor(0xFF_000_000))\n.headerTextColor(Color.composeColor(ComposeColor.Red))\n.listHeaderTextColor(Color.composeColor(ComposeColor.Cyan))\n.build()\n</code></pre> Default Result List Container Custom Result List Container"},{"location":"custom_ux/#scan-again-button-style","title":"Scan Again Button Style","text":"<p>Style used to define the look of the scan again button that appears at the top of the results container.</p> <pre><code>ScanAgainButtonStyle.Builder()\n.backgroundColor(Color.composeColor(ComposeColor.Yellow))\n.icon(Icon.drawableRes(R.drawable.ic_cam))\n.iconTintColor(Color.composeColor(ComposeColor.Cyan))\n.text(Text.stringRes(R.string.text))\n.textColor(Color.composeColor(ComposeColor.Magenta))\n.build()\n</code></pre> Default Scan Again Button Custom Scan Again Button"},{"location":"custom_ux/#store-display-style","title":"Store Display Style","text":"<p>Style used to define the look of the store info display, positioned at the top of the results container.</p> <pre><code>StoreDisplayStyle.Builder()\n.icon(Icon.drawableRes(R.drawable.ic_tag))\n.iconTintColor(Color.composeColor(ComposeColor.Yellow))\n.textColor(Color.composeColor(ComposeColor.Magenta))\n.build()\n</code></pre> Default Store Display Custom Store Display"},{"location":"custom_ux/#permission-overlay-style","title":"Permission Overlay Style","text":"<p>Style used to define the look of the permission overlay.</p> <pre><code>PermissionOverlayStyle.Builder()\n.backgroundColor(Color.composeColor(ComposeColor.LightGray))\n.detailsText(Text.stringRes(R.string.details))\n.detailsTextColor(Color.composeColor(ComposeColor.Magenta))\n.buttonBackgroundColor(Color.hexColor(0xFF_000_000))\n.buttonText(Text.stringRes(R.string.button))\n.buttonTextColor(Color.hexColor(0xFF_FFF_FFF))\n.build()\n</code></pre> Default Permission Overlay Custom Permission Overlay"},{"location":"documentation/","title":"API Documentation","text":"<p>Official code documentation for each module can be found on the links below:</p> <ul> <li>BlinkShelf Core</li> <li>BlinkShelf Camera</li> <li>BlinkShelf Camera UI</li> </ul>"},{"location":"fundamentals/","title":"Fundamentals","text":""},{"location":"fundamentals/#sdk-initialization","title":"SDK Initialization","text":"<p>The recommended way to initialize the SDK is by adding a License key in the <code>AndroidManifest.xml</code> file. <pre><code> &lt;meta-data\nandroid:name=\"com.microblink.recognition.License\"\nandroid:value=\"LICENSE KEY\" /&gt;\n</code></pre></p> <p>By doing so, our content provider will be used, and it will automatically initialize all that is necessary for the SDK to work.</p>"},{"location":"fundamentals/#manual-initialization","title":"Manual initialization","text":"<p>If you want to manually initialize the SDK, first, you should remove our content provider from the <code>AndroidManifest.xml</code> file, as shown in the snippet below.</p> <pre><code>&lt;provider\nandroid:name=\"com.microblink.recognition.core.RecognitionProvider\"\nandroid:authorities=\"${applicationId}.RecognitionProvider\"\ntools:node=\"remove\" /&gt;\n</code></pre> <p>After that, you should call <code>BlinkRecognitionSdk.initialize()</code> to initialize the SDK. There are a couple of ways how this can be achieved, we recommend using App Startup. Another way is to add the initialization code in the <code>Application</code> class in the <code>onCreate</code> method. </p> <p>The license key should be set in <code>AndroidManifest.xml</code> as mentioned in the section above.</p>"},{"location":"fundamentals/#recognition-settings","title":"Recognition settings","text":"<p>The SDK\u2019s Recognition Fragment allows customizing built-in experience via <code>RecognitionSettings</code>. Values that can be customized are:</p> <ul> <li>camera resolution</li> <li>region of interest</li> <li>theme</li> <li>media options</li> <li>feature options.</li> </ul>"},{"location":"fundamentals/#capture-resolution","title":"Capture Resolution","text":"<p>Camera resolution can be set to any of the predefined resolutions defined in <code>CameraResolution</code>. If not set, it will default to 1080p.</p>"},{"location":"fundamentals/#region-of-interest","title":"Region Of Interest","text":"<p>Defines the region in which we want to scan the frame. The properties of the <code>RectF</code> are defined as a percentage of the screen. If not set, the whole image will be used.</p>"},{"location":"fundamentals/#theme","title":"Theme","text":"<p>Custom Theme can be set. This allows clients to define their brand\u2019s colors which will then be applied to the built-in scanning experience. If not set, the default theme and colors will be used. More info about customization can be found in Custom UX.</p>"},{"location":"fundamentals/#media-options","title":"Media Options","text":"<p>By defining <code>MediaOptions</code>, it is possible to specify directory where captured images should be saved. <code>MediaOptions</code> contains a <code>File</code> object that should point to the desired folder. Note that provided folder should be part of app-specific files. If this option is not set, captured images will be saved in the default folder defined by the SDK.</p> <p>Through <code>MediaOptions</code> it is also possible to set the desired format of the captured image, the currently supported value is JPEG.</p>"},{"location":"fundamentals/#feature-options","title":"Feature Options","text":"<p>SDK\u2019s results can be customized using <code>FeatureOptions</code> class.</p> <p>By setting <code>shouldReturnPromotions</code> to <code>true</code>, clients can get both Promotions and Products in the result. Otherwise, if <code>shouldReturnPromotions</code> flag is set to <code>false</code>, results will only include Promotions. Note that the default SDK\u2019s UI will also be affected when using this flag.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#aar","title":"AAR","text":"<p>Android Archive (AAR) containing everything needed to use the BlinkShelf library can be retrieved from here.</p>"},{"location":"getting_started/#project-integration-and-initialization","title":"Project Integration and Initialization","text":"<p>To add SDK to your Android project, please add the following to your dependency section in your app <code>build.gradle</code>. <pre><code>dependencies {\nimplementation(\"androidx.core:core-ktx:1.9.0\")\nimplementation(\"androidx.appcompat:appcompat:1.6.0\")\nimplementation(\"androidx.datastore:datastore-preferences:1.0.0\")\nimplementation(\"androidx.fragment:fragment-ktx:1.5.5\")\n\nimplementation(\"com.google.android.material:material:1.8.0\")\n\nimplementation(\"io.ktor:ktor-client-okhttp:2.2.3\")\nimplementation(\"io.ktor:ktor-client-android:2.2.3\")\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:2.2.3\")\nimplementation(\"io.ktor:ktor-client-logging:2.2.3\")\nimplementation(\"io.ktor:ktor-client-content-negotiation:2.2.3\")\nimplementation(\"io.ktor:ktor-client-auth:2.2.3\")\n\nimplementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4\")\n\nimplementation(\"com.squareup.okio:okio:3.3.0\")\nimplementation(\"com.squareup.logcat:logcat:0.1\")\n\nimplementation(platform(\"androidx.compose:compose-bom:2023.01.00\"))\nimplementation(\"androidx.compose.ui:ui\")\nimplementation(\"androidx.compose.ui:ui-tooling\")\nimplementation(\"androidx.compose.foundation:foundation\")\nimplementation(\"androidx.compose.material:material\")\n\nimplementation(\"androidx.camera:camera-core:1.2.1\")\nimplementation(\"androidx.camera:camera-camera2:1.2.1\")\nimplementation(\"androidx.camera:camera-lifecycle:1.2.1\")\nimplementation(\"androidx.camera:camera-view:1.2.1\")\n\nimplementation(\"com.google.accompanist:accompanist-pager:0.28.0\")\nimplementation(\"com.google.accompanist:accompanist-pager-indicators:0.28.0\")\nimplementation(\"com.google.accompanist:accompanist-permissions:0.28.0\")\n\nimplementation(\"io.coil-kt:coil-compose:2.2.2\")\n\nimplementation(\"com.airbnb.android:lottie:5.2.0\")\nimplementation(\"com.airbnb.android:lottie-compose:5.2.0\")\n\n\nimplementation(project(\":recognition-core\"))\nimplementation(project(\":recognition-camera\"))\nimplementation(project(\":recognition-camera-ui\"))\n}\n</code></pre></p>"},{"location":"getting_started/#set-up-license-key","title":"Set up License Key","text":"<p>The recommended way to initialize the SDK would be through the <code>AndroidManifest.xml</code> file. Within this file, add the following configuration.</p> <pre><code> &lt;meta-data\nandroid:name=\"com.microblink.recognition.License\"\nandroid:value=\"LICENSE KEY\" /&gt;\n</code></pre>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>The easiest way to get started is to use the internal <code>RecognitionFragment</code>. <pre><code>&lt;androidx.fragment.app.FragmentContainerView\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/fragmentContainerView\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\" /&gt;\n</code></pre></p> <pre><code>val settings = RecognitionSettings {\n// define customizable settings if needed \n}\n\nsupportFragmentManager\n.beginTransaction()\n.add(\nR.id.fragmentContainerView,\nRecognitionFragment.newInstance(settings),\nnull\n)\n.commit()\n</code></pre> <p>More info about defining <code>RecognitionSettings</code> can be found here.</p>"},{"location":"getting_started/#handling-results","title":"Handling results","text":"<p><code>RecognitionFragment</code> uses Fragment Result API to send results back to the calling Activity. To get results, the client must set <code>FragmentResultListener</code> as shown in the code below. It is possible to listen to results returned from the Product Recognition API and/or camera frames provided by the camera.</p> <pre><code>supportFragmentManager\n.setFragmentResultListener(\nRecognitionFragment.PRODUCTS_REQUEST_KEY,\nthis\n) { _, bundle -&gt;\nval result: Products = ProductsBundle.unwrap(bundle)\n// do something with Products results\n}\n\nsupportFragmentManager\n.setFragmentResultListener(\nRecognitionFragment.MEDIA_REQUEST_KEY,\nthis\n) { _, bundle -&gt;\nval result: Media = MediaBundle.unwrap(bundle)\n// do something with Media results\n}\n</code></pre> <p>Results are wrapped in the bundle and can easily be unwrapped using the built-in helper method.</p>"},{"location":"processor_arch/","title":"Processor architecture considerations","text":"<p>BlinkShelf is distributed with ARMv7 and ARM64 native library binaries.</p> <p>ARMv7 architecture gives the ability to take advantage of hardware accelerated floating point operations and SIMD processing with NEON. This gives BlinkShelf a huge performance boost on devices that have ARMv7 processors. Most new devices (all since 2012.) have ARMv7 processor so it makes little sense not to take advantage of performance boosts that those processors can give. Also note that some devices with ARMv7 processors do not support NEON and VFPv4 instruction sets, most popular being those based on NVIDIA Tegra 2, ARM Cortex A9 and older. Since these devices are old by today\u2019s standard, BlinkShelf does not support them. For the same reason, BlinkShelf does not support devices with ARMv5 (<code>armeabi</code>) architecture.</p> <p>ARM64 is the new processor architecture that most new devices use. ARM64 processors are very powerful and also have the possibility to take advantage of new NEON64 SIMD instruction set to quickly process multiple pixels with a single instruction.</p> <p>There are some issues to be considered:</p> <ul> <li>ARMv7 build of the native library cannot be run on devices that do not have ARMv7 compatible processor</li> <li>ARMv7 processors do not understand x86 instruction set</li> <li>ARM64 processors understand ARMv7 instruction set, but ARMv7 processors do not understand ARM64 instructions.<ul> <li> NOTE: as of the year 2018, some android devices that ship with ARM64 processors do not have full compatibility with ARMv7. This is mostly due to incorrect configuration of Android\u2019s 32-bit subsystem by the vendor, however Google decided that as of August 2019 all apps on PlayStore that contain native code need to have native support for 64-bit processors (this includes ARM64 and x86_64) - this is in anticipation of future Android devices that will support 64-bit code only, i.e. that will have ARM64 processors that do not understand ARMv7 instruction set.</li> </ul> </li> <li>if ARM64 processor executes ARMv7 code, it does not take advantage of modern NEON64 SIMD operations and does not take advantage of 64-bit registers it has - it runs in emulation mode</li> </ul> <p><code>LibBlinkShelfCore.aar</code> and <code>LibBlinkShelfCameraUi.aar</code> archives contain ARMv7 and ARM64 builds of the native library. By default, when you integrate BlinkShelf into your app, your app will contain native builds for all these processor architectures. Thus, BlinkShelf will work on ARMv7 and ARM64 devices and will use ARMv7 features on ARMv7 devices and ARM64 features on ARM64 devices. However, the size of your application will be rather large.</p>"},{"location":"processor_arch/#reducing-the-final-size-of-your-app","title":"Reducing the final size of your app","text":"<p>We recommend that you distribute your app using App Bundle. This will defer apk generation to Google Play, allowing it to generate minimal APK for each specific device that downloads your app, including only required processor architecture support.</p>"},{"location":"processor_arch/#using-apk-splits","title":"Using APK splits","text":"<p>If you are unable to use App Bundle, you can create multiple flavors of your app - one flavor for each architecture. With gradle and Android studio this is very easy - just add the following code to <code>build.gradle</code> file of your app:</p> <pre><code>android {\n  ...\n  splits {\n    abi {\n      enable true\n      reset()\n      include 'armeabi-v7a', 'arm64-v8a'\n      universalApk true\n    }\n  }\n}\n</code></pre> <p>With that build instructions, gradle will build two different APK files for your app. Each APK will contain only native library for one processor architecture and one APK will contain all architectures. In order for Google Play to accept multiple APKs of the same app, you need to ensure that each APK has different version code. This can easily be done by defining a version code prefix that is dependent on architecture and adding real version code number to it in following gradle script:</p> <pre><code>// map for the version code\ndef abiVersionCodes = ['armeabi-v7a':1, 'arm64-v8a':2]\n\nimport com.android.build.OutputFile\n\nandroid.applicationVariants.all { variant -&gt;\n    // assign different version code for each output\n    variant.outputs.each { output -&gt;\n        def filter = output.getFilter(OutputFile.ABI)\n        if(filter != null) {\n            output.versionCodeOverride = abiVersionCodes.get(output.getFilter(OutputFile.ABI)) * 1000000 + android.defaultConfig.versionCode\n        }\n    }\n}\n</code></pre> <p>For more information about creating APK splits with gradle, check this article from Google.</p> <p>After generating multiple APK\u2019s, you need to upload them to Google Play. For tutorial and rules about uploading multiple APK\u2019s to Google Play, please read the official Google article about multiple APKs.</p>"},{"location":"processor_arch/#removing-processor-architecture-support","title":"Removing processor architecture support","text":"<p>If you won\u2019t be distributing your app via Google Play or for some other reasons want to have single APK of smaller size, you can completely remove support for certain CPU architecture from your APK. This is not recommended due to consequences.</p> <p>To keep only some CPU architectures, for example <code>armeabi-v7a</code> and <code>arm64-v8a</code>, add the following statement to your <code>android</code> block inside <code>build.gradle</code>:</p> <pre><code>android {\n    ...\n    ndk {\n        // Tells Gradle to package the following ABIs into your application\n        abiFilters 'armeabi-v7a', 'arm64-v8a'\n    }\n}\n</code></pre> <p>This will remove other architecture builds for all native libraries used by the application.</p> <p>To remove support for a certain CPU architecture only for BlinkShelf, add the following statement to your <code>android</code> block inside <code>build.gradle</code>:</p> <pre><code>android {\n    ...\n    packagingOptions {\n        exclude 'lib/&lt;ABI&gt;/libBlinkShelfCore.so'\n        exclude 'lib/&lt;ABI&gt;/libBlinkShelfCameraUi.so'\n    }\n}\n</code></pre> <p>where <code>&lt;ABI&gt;</code> represents the CPU architecture you want to remove:</p> <ul> <li>to remove ARMv7 support, use <code>armeabi-v7a</code></li> <li>to remove ARM64 support, use <code>arm64-v8a</code>.</li> </ul> <p>You can also remove multiple processor architectures by specifying <code>exclude</code> directive multiple times. Just bear in mind that removing processor architecture will have side effects on performance and stability of your app. Please read this for more information.</p>"},{"location":"processor_arch/#consequences-of-removing-processor-architecture","title":"Consequences of removing processor architecture","text":"<ul> <li> <p>Google decided that as of August 2019 all apps on Google Play that contain native code need to have native support for 64-bit processors (this includes ARM64 and x86_64). This means that you cannot upload application to Google Play Console that supports only 32-bit ABI and does not support corresponding 64-bit ABI.</p> </li> <li> <p>By removing ARMv7 support, BlinkShelf will not work on devices that have ARMv7 processors.</p> </li> <li>By removing ARM64 support, BlinkShelf will not use ARM64 features on ARM64 device</li> <li>also, some future devices may ship with ARM64 processors that will not support ARMv7 instruction set.</li> </ul>"},{"location":"sdk_init/","title":"SDK Initialization","text":"<p>The recommended way to initialize the SDK is by adding a License key in the <code>AndroidManifest.xml</code> file. <pre><code> &lt;meta-data\nandroid:name=\"com.microblink.recognition.License\"\nandroid:value=\"LICENSE KEY\" /&gt;\n</code></pre></p> <p>By doing so, our content provider will be used, and it will automatically initialize all that is necessary for the SDK to work.</p>"},{"location":"sdk_init/#manual-initialization","title":"Manual initialization","text":"<p>If you want to manually initialize the SDK, first, you should remove our content provider from the <code>AndroidManifest.xml</code> file, as shown in the snippet below.</p> <pre><code>&lt;provider\nandroid:name=\"com.microblink.recognition.core.RecognitionProvider\"\nandroid:authorities=\"${applicationId}.RecognitionProvider\"\ntools:node=\"remove\" /&gt;\n</code></pre> <p>After that, you should call <code>BlinkRecognitionSdk.initialize()</code> to initialize the SDK. There are a couple of ways how this can be achieved, we recommend using App Startup. Another way is to add the initialization code in the <code>Application</code> class in the <code>onCreate</code> method. </p> <p>The license key should be set in <code>AndroidManifest.xml</code> as mentioned in the section above.</p>"},{"location":"sdk_options/","title":"Recognition settings","text":"<p>The SDK\u2019s Recognition Fragment allows customizing built-in experience via <code>RecognitionSettings</code>. Values that can be customized are:</p> <ul> <li>camera resolution</li> <li>region of interest</li> <li>theme</li> <li>media options</li> <li>products options.</li> </ul>"},{"location":"sdk_options/#capture-resolution","title":"Capture Resolution","text":"<p>Camera resolution can be set to any of the predefined resolutions defined in <code>CameraResolution</code>. If not set, it will default to 1080p.</p>"},{"location":"sdk_options/#region-of-interest","title":"Region Of Interest","text":"<p>Defines the region in which we want to scan the frame. The properties of the <code>RectF</code> are defined as a percentage of the screen. If not set, the whole image will be used.</p>"},{"location":"sdk_options/#theme","title":"Theme","text":"<p>Custom Theme can be set. This allows clients to define their brand\u2019s colors which will then be applied to the built-in scanning experience. If not set, the default theme and colors will be used. More info about customization can be found in Theming.</p>"},{"location":"sdk_options/#media-options","title":"Media Options","text":"<p>By defining <code>MediaOptions</code>, it is possible to specify directory where captured images should be saved. <code>MediaOptions</code> contains a <code>File</code> object that should point to the desired folder. Note that provided folder should be part of app-specific files. If this option is not set, captured images will be saved in the default folder defined by the SDK.</p> <p>Through <code>MediaOptions</code> it is also possible to set the desired format of the captured image, the currently supported value is JPEG.</p>"},{"location":"sdk_options/#products-options","title":"Products Options","text":"<p>SDK\u2019s results can be customized using <code>ProductsOptions</code> class.</p> <p>Field <code>country</code> sets which country should be used as product database source. By default, United States is used, more info about other country options can be found here. </p> <p>By setting <code>shouldReturnPromotions</code> to <code>true</code>, clients can get both Promotions and Products in the result. Otherwise, if <code>shouldReturnPromotions</code> flag is set to <code>false</code>, results will only include Promotions. Note that the default SDK\u2019s UI will also be affected when using this flag.</p> <p><code>StoreDetectionOptions</code> class allows configuring store detection parameters. Store detection is enabled by default, but it can be disabled by setting <code>enabled</code> to false.  If enabled, it is possible to specify the radius within which store detection should be performed. The default search radius is 1 mile. Both radius value and units can be configured.</p> <p><code>FrameOptions</code> allows setting frame compression  parameters used for product recognition. It is possible to set both compression quality and compression format.  Compression quality must be larger than the specified minimum compression quality value, and less than 100. In case these conditions aren\u2019t met, SDK won\u2019t return results.  Compression Format can be one of the values available in <code>FrameFormat</code>.</p>"},{"location":"sdk_options/#ui-options","title":"Ui Options","text":"<p>Out-of-the-box experience can be modified by settings <code>UiOptions</code>.</p> <p><code>UiOptions</code> contain the flag <code>shouldShowSessionId</code> which allows the client to display the session ID on the UI.  By default, the session ID won\u2019t be shown.</p>"},{"location":"theming/","title":"Theming","text":"<p>Theming can be achieved by passing the <code>Theme</code> object to the <code>RecognitionSettings</code>, which is used when instantiating fragments as described on the Getting Started page. <code>Theme</code> class provides different customization options, like defining app colors and styles of different UI components.</p> <p>An example of theming is shown in the code sample below.</p> <pre><code>val settings = RecognitionSettings {\ntheme(\nTheme(\ncolors = ThemeColors.Builder()\n.primaryColor(Color.resourceColor(context, R.color.purple))\n.secondaryColor(Color.hexColor(0xFF_7FF_F00))\n.textColor(Color.composeColor(ComposeColor.Yellow))\n.build(),\nstatusBannerStyle = StatusBannerStyle.Builder()\n.noPromotionText(Text.stringRes(R.string.text))\n.build(),\nresultDetailsStyle = ResultDetailsStyle.Builder()\n.detailsIcon(Icon.drawableRes(R.drawable.ic_tag))\n.detailsIconTintColor(Color.hexColor(0xFF_000_000))\n.build(),\npermissionOverlayStyle = PermissionOverlayStyle.Builder()\n.backgroundColor(Color.composeColor(ComposeColor.LightGray))\n.buttonBackgroundColor(Color.hexColor(0xFF_000_000))\n.buttonText(Text.stringRes(R.string.button))\n.buttonTextColor(Color.hexColor(0xFF_FFF_FFF))\n.build()\n)\n)\n...\n}\n</code></pre> <p>When specifying any color, make sure to use SDK\u2019s <code>Color</code> class. The class contains helper methods that can create a <code>Color</code> object from resource color, hex value, or Compose Color.</p> <p>The following sections contain a detailed description of how <code>Theme</code> can be used to customize the experience.</p>"},{"location":"theming/#colors","title":"Colors","text":"<p>It is possible to define the following colors as part of the <code>ThemeColors</code> object:</p> <ul> <li>the primary color, the default value is <code>#0F62F2</code></li> <li>the secondary color, the default value is <code>#DFFE00</code></li> <li>the text color, the default value is <code>#142641</code></li> </ul> <pre><code>ThemeColors.Builder()\n.primaryColor(Color.resourceColor(context, R.color.purple))\n.secondaryColor(Color.hexColor(0xFF_7FF_F00))\n.textColor(Color.composeColor(ComposeColor.Yellow))\n.build()\n</code></pre> <p>Note that defining some of the styles below can override the colors mentioned in this section.</p>"},{"location":"theming/#boundary-style","title":"Boundary Style","text":"<p>If a region of interest is defined, boundaries will be applied to the scanning and captured frame.</p> <pre><code>BoundaryStyle.Builder()\n.scanningColor(Color.composeColor(ComposeColor.Red))\n.capturedColor(Color.composeColor(ComposeColor.Blue))\n.build()\n</code></pre> Default Scanning Boundary Custom Scanning Boundary Default Captured Boundary Custom Captured Boundary"},{"location":"theming/#status-banner-style","title":"Status Banner Style","text":"<p>Style used to define the look and feel of the status banner that appears for certain errors, like \u201cno results found\u201d.</p> <pre><code>StatusBannerStyle.Builder()\n.textColor(Color.hexColor(0xFF_FFF_FFF))\n.backgroundColor(Color.hexColor(0xFF_000_000))\n.noPromotionText(Text.stringRes(R.string.text))\n.build()\n</code></pre> Default Status Banner Custom Status Banner"},{"location":"theming/#promotion-banner-style","title":"Promotion Banner Style","text":"<p>Style used to define the look and feel of the promotion banner shown on top of the results.</p> <pre><code>PromotionBannerStyle.Builder()\n.textColor(Color.composeColor(ComposeColor.Yellow))\n.backgroundColor(Color.composeColor(ComposeColor.Red))\n.build()\n</code></pre> Default Promotion Banner Custom Promotion Banner"},{"location":"theming/#promotion-tag-style","title":"Promotion Tag Style","text":"<p>Style used to define the look of the indicator similar to the banner, containing an icon, shown on top of the results.</p> <pre><code>PromotionTagStyle.Builder()\n.icon(Icon.drawableRes(R.drawable.ic_tag))\n.tintColor(Color.composeColor(ComposeColor.Yellow))\n.backgroundColor(Color.composeColor(ComposeColor.Red))\n.build()\n</code></pre> Default Promotion Tag Custom Promotion Tag"},{"location":"theming/#camera-button-style","title":"Camera Button Style","text":"<p>Style used to define the camera button appearance.</p> <pre><code>CameraButtonStyle.Builder()\n.icon(Icon.drawableRes(R.drawable.ic_camera))\n.tintColor(Color.composeColor(ComposeColor.Cyan))\n.build()\n</code></pre> Default Camera Button Custom Camera Button"},{"location":"theming/#result-indicator-style","title":"Result Indicator Style","text":"<p>Style used for indicator displayed on top of the detected product.</p> <pre><code>ResultIndicatorStyle.Builder()\n.backgroundColor(Color.composeColor(ComposeColor.Blue))\n.promotionIcon(Icon.drawableRes(R.drawable.ic_tag))\n.promotionIconTintColor(Color.hexColor(0xFF_FFF_FFF))\n.promotionCounterBackgroundColor(Color.resourceColor(context, R.color.green))\n.promotionCounterTextColor(Color.hexColor(0xFF_000_000))\n.build()\n</code></pre> Default Result Indicator Custom Result Indicator"},{"location":"theming/#result-card-style","title":"Result Card Style","text":"<p>Style used to define the appearance of the card containing results, i.e. product and promotion details.</p> <pre><code>ResultCardStyle.Builder()\n.titleTextColor(Color.hexColor(0xFF_FFF_FFF))\n.subtitleTextColor(Color.composeColor(ComposeColor.Green))\n.detailsTextColor(Color.composeColor(ComposeColor.Blue))\n.backgroundColor(Color.composeColor(ComposeColor.DarkGray))\n.build()\n</code></pre> Default Result Card Custom Result Card"},{"location":"theming/#result-details-style","title":"Result Details Style","text":"<p>Style used to define the appearance of the bottom sheet containing result details.</p> <pre><code>ResultDetailsStyle.Builder()\n.closeIcon(Icon.drawableRes(R.drawable.ic_close))\n.titleTextColor(Color.composeColor(ComposeColor.Yellow))\n.detailsIcon(Icon.drawableRes(R.drawable.ic_tag))\n.detailsIconTintColor(Color.hexColor(0xFF_000_000))\n.detailsLabelTextColor(Color.composeColor(ComposeColor.Red))\n.detailsStrokeColor(Color.hexColor(0xFF_FFF_FFF))\n.detailsTitleTextColor(Color.composeColor(ComposeColor.Blue))\n.detailsContentTextColor(Color.resourceColor(context, R.color.green))\n.backgroundColor(Color.composeColor(ComposeColor.LightGray))\n.build()\n</code></pre> Default Result Details Custom Result Details"},{"location":"theming/#result-list-container-style","title":"Result List Container Style","text":"<p>Style used to define the appearance of the bottom sheet containing results, i.e. list of products and promotions, and the sheet\u2019s container.</p> <pre><code>ResultListContainerStyle.Builder()\n.containerBackgroundColor(Color.resourceColor(context, R.color.purple))\n.sheetBackgroundColor(Color.composeColor(ComposeColor.Yellow))\n.notchColor(Color.composeColor(ComposeColor.Green))\n.titleTextColor(Color.hexColor(0xFF_000_000))\n.headerTextColor(Color.composeColor(ComposeColor.Red))\n.listHeaderTextColor(Color.composeColor(ComposeColor.Cyan))\n.build()\n</code></pre> Default Result List Container Custom Result List Container"},{"location":"theming/#scan-again-button-style","title":"Scan Again Button Style","text":"<p>Style used to define the look of the scan again button that appears at the top of the results container.</p> <pre><code>ScanAgainButtonStyle.Builder()\n.backgroundColor(Color.composeColor(ComposeColor.Yellow))\n.icon(Icon.drawableRes(R.drawable.ic_cam))\n.iconTintColor(Color.composeColor(ComposeColor.Cyan))\n.text(Text.stringRes(R.string.text))\n.textColor(Color.composeColor(ComposeColor.Magenta))\n.build()\n</code></pre> Default Scan Again Button Custom Scan Again Button"},{"location":"theming/#store-display-style","title":"Store Display Style","text":"<p>Style used to define the look of the store info display, positioned at the top of the results container.</p> <pre><code>StoreDisplayStyle.Builder()\n.icon(Icon.drawableRes(R.drawable.ic_tag))\n.iconTintColor(Color.composeColor(ComposeColor.Yellow))\n.textColor(Color.composeColor(ComposeColor.Magenta))\n.build()\n</code></pre> Default Store Display Custom Store Display"},{"location":"theming/#permission-overlay-style","title":"Permission Overlay Style","text":"<p>Style used to define the look of the permission overlay.</p> <pre><code>PermissionOverlayStyle.Builder()\n.backgroundColor(Color.composeColor(ComposeColor.LightGray))\n.detailsText(Text.stringRes(R.string.details))\n.detailsTextColor(Color.composeColor(ComposeColor.Magenta))\n.buttonBackgroundColor(Color.hexColor(0xFF_000_000))\n.buttonText(Text.stringRes(R.string.button))\n.buttonTextColor(Color.hexColor(0xFF_FFF_FFF))\n.build()\n</code></pre> Default Permission Overlay Custom Permission Overlay"}]}